import org.gjt.sp.jedit.*;
import projectviewer.*;
import projectviewer.vpt.*;
import projectviewer.event.*;

sourceRelative("../utils.bsh");

includeOnce("log.bsh");

String amoFindProjectDirectory(int index) {
    View view = jEdit.getActiveView();
    
    if (jEdit.getPlugin("projectviewer.ProjectPlugin", true) == null) {
        Macros.error(view, "ProjectViewer not installed");
        return null;
    }
    
    VPTProject project = null;
    
    if (index == -1) {
        project = ProjectViewer.getActiveProject(view);
        
        if (project == null) {
            ProjectViewer viewer = ProjectViewer.getViewer(view);
            if (viewer != null) {
                VPTNode selected = viewer.getSelectedNode();
                if (selected != null) {
                    project = VPTNode.findProjectFor(selected);
                }
            }
        }
    }
    else {
        ProjectViewer viewer = ProjectViewer.getViewer(view);
        
        if (viewer != null) {
            VPTNode root = viewer.getRoot();
            try {
                VPTNode child = (VPTNode) root.getChildAt(index);
                if (child.isProject())
                    project = (VPTProject) child;
            }
            catch (ArrayIndexOutOfBoundsException) {
            }
        }
    }
    
    if (project != null)
        return project.getNodePath();
    else
        return null;
}

String amoFindProjectDirectory() {
    return amoFindProjectDirectory(-1);
}

File amoMakeFile(String directory) {
    File file;
    
    file = new File(directory + File.separator + "Makefile.bsh");
    if (file.exists()) return file;
    
    file = new File(directory + File.separator + "Makefile.jedit");
    if (file.exists()) return file;
    
    file = new File(directory + File.separator + "Makefile");
    if (file.exists()) return file;
    
    return null;
}

File amoFindMakeFile() {
    File makefile = null;
    
    View view = jEdit.getActiveView();
    Buffer buffer = (view == null) ? null : view.getBuffer();
    
    if (buffer != null) {
        File directory = new File(buffer.getDirectory());
        
        while (true) {
            makefile = amoMakeFile(directory.getPath());
            
            if (makefile != null) break;
            
            String path = directory.getParent();
            
            if (path == null) break;
            
            directory = new File(path);
        }
        
        if (makefile != null) {
            //amoMakeMessage("Using " + makefile + " found in current buffer path");
        }
    }
    
    if (makefile == null) {
        String path = amoFindProjectDirectory();
        
        if (path != null) {
            directory = new File(path);
            makefile = amoMakeFile(path);
            
            if (makefile != null) {
                //amoMakeMessage("Using " + makefile + " found in active project directory");
            }
        }
    }
    
    if (makefile == null) {
        for (int i = 0; ; ++i) {
            String path = amoFindProjectDirectory(i);
            
            if (path != null) {
                directory = new File(path);
                makefile = amoMakeFile(path);
                
                if (makefile != null) {
                    //amoMakeMessage("Using " + makefile + " found in project directory");
                    break;
                }
            }
            else {
                break;
            }
        }
    }
    
    if (makefile == null) {
        //amoMakeMessage("Makefile not found");
    }
    
    return makefile;
}

