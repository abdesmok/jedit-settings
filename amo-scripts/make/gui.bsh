import org.gjt.sp.jedit.*;
import java.awt.*;
import java.awt.font.*;
import javax.swing.*;
import projectviewer.*;

sourceRelative("../utils.bsh");

includeOnce("log.bsh");
includeOnce("result.bsh");

Container amoMakeContainer() {
    return amoMakeContainer(null);
}

Container amoMakeContainer(View view) {
    if (view == null) {
        view = jEdit.getActiveView();
    }
    
    if (view != null) {
        JMenuBar menuBar = view.getJMenuBar();
        if (menuBar != null) {
        
            for (int i = 0; i < menuBar.getComponentCount(); ++i) {
                JComponent component = menuBar.getComponent(i);
                if (component instanceof Box.Filler) {
                    return menuBar;
                }
            }
            
            menuBar.add(Box.createHorizontalGlue());
            
            return menuBar;
        }
    }
    
    return null;
}

void amoMakeRemoveComponents() {
    amoMakeRemoveComponents(null);
}

void amoMakeRemoveComponents(View view) {
    Container container = amoMakeContainer(view);
    
    if (container == null)
        return;
        
    for (int i = 0; i < container.getComponentCount(); ) {
        String name = container.getComponent(i).getName();
        
        if (name != null && name.startsWith("AmoMake"))
            container.remove(i);
        else
            ++i;
    }
}

JComboBox amoMakeComboBox(String name, boolean create) {
    return amoMakeComboBox(null, name, create);
}

JComboBox amoMakeComboBox(View view, String name, boolean create) {
    return (JComboBox) amoMakeComponent(view, name, create, Class.forName("javax.swing.JComboBox"));
}

JComponent amoMakeComponent(String name, boolean create, Class type) {
    return amoMakeComponent(null, name, create, type);
}

JComponent amoMakeComponent(View view, String name, boolean create, Class type) {
    Container container = amoMakeContainer(view);
    
    if (container == null)
        return null;
        
    int index = 0;
    
    JComponent component = null;
    
    for (int i = 0; i < container.getComponentCount(); ++i) {
        JComponent existingComponent = container.getComponent(i);
        String existingComponentName = existingComponent.getName();
        
        //amoMessage("component " + i + " " + existingComponent.getClass().getName() + " " + (existingComponentName == null ? "null" : existingComponentName));
        
        if (existingComponent.getClass().equals(type)) {
            if (existingComponentName != null && existingComponentName.equals(name)) {
                if (component == null) {
                    component = existingComponent;
                }
                else {
                    container.remove(existingComponent);
                    continue;
                }
            }
        }
    }
    
    if (component != null || ! create)
        return component;
        
    component = (JComponent) type.newInstance();
    
    if (component != null) {
        component.setName(name);
        
        container.add(component);
    }
    
    return component;
}

void amoMakeUpdateComponents() {
    amoMakeUpdateComponents(null, null);
}

void amoMakeUpdateComponents(File makefile) {
    amoMakeUpdateComponents(null, makefile);
}

void amoMakeUpdateComponents(View view, File makefile) {
    amoMakeUpdateComponents(view, makefile, true);
}

void amoMakeUpdateComponents(View view, File makefile, boolean clear) {
    if (makefile == null)
        makefile = amoFindMakeFile(view);
        
    String labelText;
    
    {
        JLabel label = (JLabel) amoMakeComponent(view, "AmoMakefileLabel", false, Class.forName("javax.swing.JLabel"));
        if (label != null)
            labelText = label.getText();
    }
    
    if (clear) {
        amoMakeRemoveComponents(view);
    }
    
    boolean changed = true;
    
    if (makefile != null) {
        BufferedReader br = amoMakeResult(view, "args", makefile);
        
        if (! clear) {
            JLabel label = (JLabel) amoMakeComponent(view, "AmoMakefileLabel", false, Class.forName("javax.swing.JLabel"));
            
            if (label != null) {
                br.mark(1028 * 10);
                
                String currentArgs = "";
                String line;
                
                while ((line = br.readLine()) != null) {
                    currentArgs += line;
                }
                
                //amoMessage("cur " + currentArgs);
                
                Object previousArgs = label.getClientProperty("AmoMakePreviousArgs");
                
                changed = previousArgs == null || ! previousArgs.toString().equals(currentArgs);
                
                //amoMessage("pre " + previousArgs + " " + changed);
                
                if (changed) {
                    try {
                        br.reset();
                    }
                    catch (IOException ioException) {
                        br = amoMakeResult(view, "args", makefile);
                    }
                }
            }
        }
        
        if (changed) {
            if (! clear) {
                amoMakeRemoveComponents(view);
            }
            
            String makefilePath = makefile.getPath().replace(makefile.separator, "/");
            
            label = (JLabel) amoMakeComponent(view, "AmoMakefileLabel", true, Class.forName("javax.swing.JLabel"));
            
            if (label != null) {
                if (labelText != null)
                    label.setText(labelText);
                
                int defaultDismissDelay = ToolTipManager.sharedInstance().getDismissDelay();
                
                label.addMouseListener(new MouseListener() {
                    void mouseClicked(MouseEvent event) {
                        if (event.getButton() == MouseEvent.BUTTON1) {
                            //FileOpenerService.open(makefilePath, );
                            jEdit.openFile(jEdit.getActiveView(), makefilePath);
                        }
                        else if (event.getButton() == MouseEvent.BUTTON3) {
                            Object prop = label.getClientProperty("duplications");
                            if (prop instanceof Vector) {
                                Vector duplications = (Vector) prop;
                                for (String path : duplications) {
                                    jEdit.openFile(jEdit.getActiveView(), path);
                                }
                            }
                        }
                    }
                    
                    public void mouseEntered(MouseEvent event) {
                        ToolTipManager.sharedInstance().setDismissDelay(60000 * 60 * 24);
                    }
                    
                    public void mouseExited(MouseEvent event) {
                        ToolTipManager.sharedInstance().setDismissDelay(defaultDismissDelay);
                    }
                    
                    invoke(name, args) {
                        //print("Method: " + name + " invoked!");
                    }
                });
            }
            
            String currentArgs = "";
            String line;
            
            while ((line = br.readLine()) != null) {
                currentArgs += line;
                
                int index = line.indexOf('=');
                
                //amoMessage(line);
                if (index > 0) {
                    JComboBox comboBox = amoMakeComboBox(view, "AmoMake_" + line.substring(0, index), true);
                    
                    if (comboBox != null) {
                        boolean isEditable = comboBox.isEditable();
                        comboBox.setEditable(false);
                        
                        if (line.substring(index + 1).equals("*")) {
                            isEditable = true;
                        }
                        else {
                            //comboBox.addItem(line);
                            comboBox.addItem(line.substring(line.indexOf('=') + 1));
                        }
                        
                        comboBox.setMinimumSize(new Dimension(50, 24));
                        comboBox.setMaximumSize(comboBox.getMinimumSize());
                        comboBox.getParent().validate();
                        comboBox.setEditable(isEditable);
                    }
                }
            }
            
            if (label != null) {
                label.putClientProperty("AmoMakePreviousArgs", currentArgs);
                //amoMessage("put " + currentArgs);
            }
        }
    }
    else {
        if (! clear) {
            amoMakeRemoveComponents(view);
        }
        
        JLabel label = (JLabel) amoMakeComponent(view, "AmoMakefileLabel", true, Class.forName("javax.swing.JLabel"));
        
        if (label != null) {
            label.setText("Makefile not found ");
        }
    }
    
    if (changed) {
        Container container = amoMakeContainer(view);
        
        if (container != null) {
            Dimension d = container.getPreferredSize();
            d.height = 30;
            container.setPreferredSize(d);
            
            for (int i = 0; i < container.getComponentCount(); ++i) {
                JComponent component = container.getComponent(i);
                String componentName = component.getName();
                
                if (component instanceof JComboBox && componentName != null && componentName.startsWith("AmoMake_")) {
                    String variableName = componentName.substring(8);
                    
                    JComboBox comboBox = (JComboBox) component;
                    
                    comboBox.setToolTipText(variableName);
                    
                    if (makefile != null) {
                        Properties prop = new Properties();
                        try {
                            prop.load(new FileInputStream(makefile.getParent() + "/jedit.properties"));
                            String value = prop.getProperty("make.arg." + variableName, null);
                            if (value != null)
                                comboBox.setSelectedItem(value);
                            //amoMessage("make.arg." + variableName + "-------------->" + prop.getProperty("make.arg." + variableName, "null"));
                        }
                        catch (IOException ex) {
                            //amoMessage(ex.toString());
                        }
                    }
                    
                    int emptyValueIndex = -1;
                    
                    if (! comboBox.isEditable()) {
                        int count = comboBox.getItemCount();
                        
                        if (count == 2) {
                            String onValue;
                            if (comboBox.getItemAt(0).isEmpty()) {
                                emptyValueIndex = 0;
                                onValue = comboBox.getItemAt(1);
                            }
                            else if (comboBox.getItemAt(1).isEmpty()) {
                                emptyValueIndex = 1;
                                onValue = comboBox.getItemAt(0);
                            }
                            
                            if (onValue != null && ! onValue.isEmpty()) {
                                //amoMessage("EMPTY " + onValue);
                                
                                class Renderer extends DefaultListCellRenderer {
                                    comboBox.putClientProperty("AmoMakeEmptyValueIndex", emptyValueIndex);
                                    
                                    public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                                        Component component = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                                        
                                        component.setText(onValue);
                                        
                                        Map attributes = component.getFont().getAttributes();
                                        attributes.put(TextAttribute.STRIKETHROUGH, value.toString().isEmpty());
                                        component.setFont(component.getFont().deriveFont(attributes));
                                        
                                        return component;
                                    }
                                };
                                
                                {
                                    Map attributes = comboBox.getFont().getAttributes();
                                    attributes.put(TextAttribute.STRIKETHROUGH, emptyValueIndex == comboBox.getSelectedIndex());
                                    comboBox.setFont(comboBox.getFont().deriveFont(attributes));
                                }
                                
                                comboBox.setRenderer(new Renderer());
                            }
                            else {
                                emptyValueIndex = -1;
                            }
                        }
                    }
                    
                    comboBox.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            if (makefile != null) {
                                Properties prop = new Properties();
                                try {
                                    prop.load(new FileInputStream(makefile.getParent() + "/jedit.properties"));
                                }
                                catch (IOException ex) {
                                    //amoMessage(ex.toString());
                                }
                                try {
                                    String value;
                                    
                                    Map attributes = comboBox.getFont().getAttributes();
                                    attributes.put(TextAttribute.STRIKETHROUGH, emptyValueIndex == comboBox.getSelectedIndex());
                                    comboBox.setFont(comboBox.getFont().deriveFont(attributes));
                                    
                                    if (emptyValueIndex == comboBox.getSelectedIndex())
                                        value = "";
                                    else
                                        value = comboBox.getSelectedItem();
                                        
                                    //amoMessage("CHANGED " + value);
                                    
                                    prop.setProperty("make.arg." + variableName, value);
                                    prop.store(new FileOutputStream(makefile.getParent() + "/jedit.properties"), null);
                                    //amoMessage("make.arg." + componentName + "<--------------" + comboBox.getSelectedItem());
                                }
                                catch (IOException ex) {
                                    amoMessage(ex.toString());
                                }
                            }
                            
                            //amoMessage(amoGuiMakeArgList().toString());
                            
                            amoMakeUpdateComponents(view, makefile, false);
                        }
                    });
                }
            }
            
            if (clear)
                amoMakeUpdateComponents(view, makefile, false);
            
            container.repaint();
        }
    }
}

Vector amoGuiMakeArgList() {
    return amoGuiMakeArgList(null);
}

Vector amoGuiMakeArgList(View view) {
    Container container = amoMakeContainer(view);
    
    Vector args = new Vector();
    
    if (container == null)
        return args;
        
    for (int i = 0; i < container.getComponentCount(); ++i) {
        JComponent component = container.getComponent(i);
        String componentName = component.getName();
        
        if (component instanceof JComboBox && componentName != null && componentName.startsWith("AmoMake_")) {
            JComboBox comboBox = (JComboBox) component;
            
            String variableName = componentName.substring(8);
            String value = comboBox.getSelectedItem();
            int index = comboBox.getSelectedIndex();
            
            if (index == comboBox.getClientProperty("AmoMakeEmptyValueIndex")) {
                args.add(variableName + "=");
                //amoMessage(variableName + "=");
            }
            else {
                args.add(variableName + "=" + value);
                //amoMessage(variableName + "=" + value);
            }
        }
    }
    
    return args;
}

String amoGuiMakeArgs() {
    return amoGuiMakeArgs(null);
}

String amoGuiMakeArgs(View view) {
    String args = "";
    
    for (String arg : amoGuiMakeArgList(view)) {
        args += " " + arg;
    }
    
    return args;
}

