import org.gjt.sp.jedit.*;

sourceRelative("../utils.bsh");

includeOnce("log.bsh");
includeOnce("result.bsh");

Container amoMakeContainer() {
    View view = jEdit.getActiveView();
    
    if (view != null) {
        JMenuBar menuBar = view.getJMenuBar();
        if (menuBar != null) {
        
            for (int i = 0; i < menuBar.getComponentCount(); ++i) {
                JComponent component = menuBar.getComponent(i);
                if (component instanceof Box.Filler) {
                    return menuBar;
                }
            }
            
            menuBar.add(Box.createHorizontalGlue());
            
            return menuBar;
        }
    }
    
    return null;
}

void amoMakeRemoveComponents() {
    Container container = amoMakeContainer();
    
    if (container == null)
        return;
        
    for (int i = 0; i < container.getComponentCount(); ) {
        String name = container.getComponent(i).getName();
        
        if (name != null && name.startsWith("AmoMake"))
            container.remove(i);
        else
            ++i;
    }
}

JComboBox amoMakeComboBox(String name, boolean create) {
    return (JComboBox) amoMakeComponent(name, create, Class.forName("javax.swing.JComboBox"));
}

JComponent amoMakeComponent(String name, boolean create, Class type) {
    Container container = amoMakeContainer();
    
    if (container == null)
        return null;
        
    int index = 0;
    
    JComponent component = null;
    
    for (int i = 0; i < container.getComponentCount(); ++i) {
        JComponent existingComponent = container.getComponent(i);
        String existingComponentName = existingComponent.getName();
        
        //amoMessage("component " + i + " " + existingComponent.getClass().getName() + " " + (existingComponentName == null ? "null" : existingComponentName));
        
        if (existingComponent.getClass().equals(type)) {
            if (existingComponentName != null && existingComponentName.equals(name)) {
                if (component == null) {
                    component = existingComponent;
                }
                else {
                    container.remove(existingComponent);
                    continue;
                }
            }
        }
    }
    
    if (component != null || ! create)
        return component;
        
    component = (JComponent) type.newInstance();
    
    if (component != null) {
        component.setName(name);
        
        container.add(component);
    }
    
    return component;
}

void amoMakeUpdateComponents() {
    amoMakeUpdateComponents(null);
}

void amoMakeUpdateComponents(File makefile) {
    amoMakeUpdateComponents(makefile, true);
}

void amoMakeUpdateComponents(File makefile, boolean clear) {
    if (makefile == null)
        makefile = amoFindMakeFile();
    //amoMessage("makefile: " + (makefile == null ? "null" : makefile.getPath()));
    
    if (clear) {
        amoMakeRemoveComponents();
    }
    
    if (makefile != null) {
        BufferedReader br = amoMakeResult("args", makefile);
        
        if (! clear) {
            amoMakeRemoveComponents();
        }
        
        String makefilePath = makefile.getPath().replace(makefile.separator, "/");
        
        JLabel label = (JLabel) amoMakeComponent("AmoMakefileLabel", true, Class.forName("javax.swing.JLabel"));
        
        if (label != null) {
            //label.setText(makefilePath + " ");
            
            label.addMouseListener(new MouseListener() {
                void mouseClicked(MouseEvent event) {
                    if (event.getButton() == MouseEvent.BUTTON1) {
                        //FileOpenerService.open(makefilePath, );
                        jEdit.openFile(jEdit.getActiveView(), makefilePath);
                    }
                    else if (event.getButton() == MouseEvent.BUTTON3) {
                        Object prop = label.getClientProperty("duplications");
                        if (prop instanceof Vector) {
                            Vector duplications = (Vector) prop;
                            for (String path : duplications) {
                                jEdit.openFile(jEdit.getActiveView(), path);
                            }
                        }
                    }
                }
                invoke(name, args) {
                    print("Method: " + name + " invoked!");
                }
            });
        }
        
        String line;
        
        while ((line = br.readLine()) != null) {
            int index = line.indexOf('=');
            
            //amoMessage(line);
            if (index > 0) {
                JComboBox comboBox = amoMakeComboBox("AmoMake_" + line.substring(0, index), true);
                
                if (comboBox != null) {
                    boolean isEditable = comboBox.isEditable();
                    comboBox.setEditable(false);
                    
                    if (line.substring(index + 1).equals("*")) {
                        isEditable = true;
                    }
                    else {
                        //comboBox.addItem(line);
                        comboBox.addItem(line.substring(line.indexOf('=') + 1));
                    }
                    
                    comboBox.setMaximumSize(comboBox.getMinimumSize());
                    comboBox.setMinimumSize(new Dimension(50, comboBox.getMinimumSize().height));
                    comboBox.getParent().validate();
                    comboBox.setEditable(isEditable);
                }
            }
        }
    }
    else {
        amoMakeRemoveComponents();
        
        JLabel label = (JLabel) amoMakeComponent("AmoMakefileLabel", true, Class.forName("javax.swing.JLabel"));
        
        if (label != null) {
            label.setText("Makefile not found ");
        }
    }
    
    {
        JComboBox indentSizeComboBox = (JComboBox) amoMakeComponent("AmoMakeIndentSize", true, Class.forName("javax.swing.JComboBox"));
        
        if (indentSizeComboBox != null) {
            indentSizeComboBox.setMaximumSize(indentSizeComboBox.getMinimumSize());
            indentSizeComboBox.getParent().validate();
            
            for (int i = 1; i <= 16; ++i) {
                indentSizeComboBox.addItem("Indent " + i);
            }
            
            indentSizeComboBox.addItemListener(new ItemListener() {
                void itemStateChanged(ItemEvent event) {
                    View view = jEdit.getActiveView();
                    if (view != null) {
                        Buffer buffer = view.getBuffer();
                        
                        if (buffer != null) {
                            int indentSize = indentSizeComboBox.getSelectedIndex() + 1;
                            
                            buffer.setProperty("tabSize", indentSize);
                            buffer.setProperty("indentSize", indentSize);
                        }
                    }
                }
                
                invoke(name, args) {
                }
            });
        }
    }
    
    Container container = amoMakeContainer();
    
    if (container != null) {
        for (int i = 0; i < container.getComponentCount(); ++i) {
            JComponent component = container.getComponent(i);
            String componentName = component.getName();
            
            if (component instanceof JComboBox && componentName != null && componentName.startsWith("AmoMake_")) {
                String variableName = componentName.substring(8);
                
                JComboBox comboBox = (JComboBox) component;
                
                comboBox.setToolTipText(variableName);
                
                if (makefile != null) {
                    Properties prop = new Properties();
                    try {
                        prop.load(new FileInputStream(makefile.getParent() + "/jedit.properties"));
                        String value = prop.getProperty("make.arg." + variableName, null);
                        if (value != null)
                            comboBox.setSelectedItem(/*variableName + "=" +*/ value);
                        //amoMessage("make.arg." + variableName + "-------------->" + prop.getProperty("make.arg." + variableName, "null"));
                    }
                    catch (IOException ex) {
                        //amoMessage(ex.toString());
                    }
                }
                
                comboBox.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        if (makefile != null) {
                            Properties prop = new Properties();
                            try {
                                prop.load(new FileInputStream(makefile.getParent() + "/jedit.properties"));
                            }
                            catch (IOException ex) {
                                //amoMessage(ex.toString());
                            }
                            try {
                                String value = comboBox.getSelectedItem();
                                prop.setProperty("make.arg." + variableName, value.substring(value.indexOf('=') + 1));
                                prop.store(new FileOutputStream(makefile.getParent() + "/jedit.properties"), null);
                                //amoMessage("make.arg." + componentName + "<--------------" + comboBox.getSelectedItem());
                            }
                            catch (IOException ex) {
                                amoMessage(ex.toString());
                            }
                        }
                        
                        //amoMessage(amoGuiMakeArgList().toString());
                        
                        amoMakeUpdateComponents(makefile, false);
                    }
                });
            }
        }
        
        if (clear)
            amoMakeUpdateComponents(makefile, false);
        
        container.repaint();
    }
}

Vector amoGuiMakeArgList() {
    Container container = amoMakeContainer();
    
    Vector args = new Vector();
    
    if (container == null)
        return args;
        
    for (int i = 0; i < container.getComponentCount(); ++i) {
        JComponent component = container.getComponent(i);
        String componentName = component.getName();
        
        if (component instanceof JComboBox && componentName != null && componentName.startsWith("AmoMake_")) {
            String variableName = componentName.substring(8);
            String value = ((JComboBox) component).getSelectedItem();
            if (value.startsWith(variableName + "="))
                args.add(value);
            else
                args.add(variableName + "=" + value);
        }
    }
    
    return args;
}

String amoGuiMakeArgs() {
    String args = "";
    
    for (String arg : amoGuiMakeArgList()) {
        args += " " + arg;
    }
    
    return args;
}

