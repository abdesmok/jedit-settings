import org.gjt.sp.jedit.*;
import org.gjt.sp.jedit.io.*;
import projectviewer.event.*;
import java.beans.*;
import java.io.*;

sourceRelative("../utils.bsh");

includeOnce("log.bsh");
includeOnce("gui.bsh");
includeOnce("result.bsh");
includeOnce("../customize.bsh");

boolean amoListenerVerbose = false;
boolean amoListenerDiagnose = false;

void amoListenerMessage(String message) {
    if (amoListenerVerbose) {
        amoMessage(message);
    }
}

EBMessage amoEBMessage(String message) {
    class AmoEBMessage extends EBMessage {
        public AmoEBMessage() {
            super(new EBComponent() {});
        }
        
        public String paramString() {
            return message;
        }
    };
    
    return new AmoEBMessage();
}

void amoMakeStartListener() {
    File lastMakefile = amoFindMakeFile();
    Vector lastDuplications = new Vector();
    
    boolean updateSent = false;
    boolean updateMakefileSent = false;
    boolean updateComponentsSent = false;
    boolean processing = false;
    
    HashSet buffersToSave = new HashSet();
    HashSet savingBuffers = new HashSet();
    
    HashSet viewsToUpdate = new HashSet();
    HashSet viewsToCustomize = new HashSet();
    
    EBComponent component = new EBComponent() {
        public File getMakefile() {
            return makefile;
        }
        
        public void sendUpdate() {
            amoListenerMessage("* sendUpdate");
            
            if (! updateSent) {
                amoListenerMessage("> UPDATE SENT");
                
                updateSent = true;
                updateSent = true;
                
                EditBus.sendAsync(amoEBMessage("UPDATE"));
            }
        }
        
        public void sendUpdateMakefile() {
            amoListenerMessage("* sendUpdateMakefile");
            
            if (! updateMakefileSent) {
                updateMakefileSent = true;
                sendUpdate();
            }
        }
        
        public void sendUpdateComponents() {
            amoListenerMessage("* sendUpdateComponents");
            
            if (! updateComponentsSent) {
                updateComponentsSent = true;
                sendUpdate();
            }
        }
        
        public void handleMessage(EBMessage message) {
            processing = true;
            
            //amoMessage("---> " + message.toString());
            
            if (amoListenerDiagnose) {
                amoListenerMessage("---> " + message.toString());
            }
            
            //amoListenerMessage("~ThreadID: " + Thread.currentThread().getId());
            //amoListenerMessage("~EDT? " + SwingUtilities.isEventDispatchThread());
            
            boolean updateComponents = false;
            boolean updateLabel = false;
            boolean saveDuplications = false;
            
            //Buffer savedBuffer = null;
            
            /*if (message instanceof NodeSelectionUpdate) { // project viewer
                amoListenerMessage("# BufferChanging");
                sendUpdateMakefile();
            }
            else if (message instanceof ViewerUpdate) { // project viewer
                amoListenerMessage("# ViewerUpdate");
                sendUpdateMakefile();
            }
            else if (message instanceof BufferChanging) { // edit pane
                amoListenerMessage("# BufferChanging");
                sendUpdateMakefile();
            }
            else*/ if (message instanceof EditPaneUpdate) {
                EditPaneUpdate editPaneUpdate = (EditPaneUpdate) message;
                
                if (editPaneUpdate.getWhat() == EditPaneUpdate.BUFFER_CHANGED) {
                    amoListenerMessage("# EditPaneUpdate BUFFER_CHANGED");
                    
                    sendUpdateMakefile();
                }
            }
            else if (message instanceof PropertiesChanged) {
                amoListenerMessage("# PropertiesChanged");
                for (View view: jEdit.getViews()) {
                    viewsToUpdate.add(view);
                    viewsToCustomize.add(view);
                }
                
                sendUpdateComponents();
                EditBus.sendAsync(amoEBMessage("CUSTOMIZE"));
            }
            else if (message instanceof BufferUpdate) {
                BufferUpdate bufferUpdate = (BufferUpdate) message;
                //amoMessage(bufferUpdate.getWhat());
                
                if (bufferUpdate.getWhat() == BufferUpdate.SAVED) {
                    Buffer buffer = bufferUpdate.getBuffer();
                    
                    amoListenerMessage("# BufferUpdate.SAVED " + buffer.getName());
                    
                    if (! savingBuffers.contains(buffer)) {
                        if (lastMakefile != null) {
                            if (bufferUpdate.getBuffer().getPath().equals(lastMakefile.getPath())) {
                                //updateComponents = true;
                                
                                // ! overwrite remote Makefile !
                                buffersToSave.add(bufferUpdate.getBuffer());
                                sendUpdateComponents();
                                //updateLabel = true;
                                //savedBuffer = bufferUpdate.getBuffer();
                            }
                            else {
                                buffersToSave.add(bufferUpdate.getBuffer());
                                sendUpdate();
                                //updateLabel = true;
                                //savedBuffer = bufferUpdate.getBuffer();
                            }
                        }
                    }
                }
                else if (bufferUpdate.getWhat() == BufferUpdate.LOADED) {
                    amoListenerMessage("# BufferUpdate.LOADED");
                    
                    File propertiesFile = amoFindPropertiesFile();
                    Buffer buffer = bufferUpdate.getBuffer();
                    
                    if (propertiesFile != null && buffer != null) {
                        Properties properties = new Properties();
                        
                        try {
                            properties.load(new FileInputStream(propertiesFile));
                            String value = properties.getProperty("buffer.indentSize");
                            if (value != null) {
                                int intValue = Integer.parseInt(value);
                                if (intValue > 0 && intValue <= 16) buffer.setProperty("indentSize", intValue);
                            }
                            value = properties.getProperty("buffer.tabSize");
                            if (value != null) {
                                int intValue = Integer.parseInt(value);
                                if (intValue > 0 && intValue <= 16) buffer.setProperty("tabSize", intValue);
                            }
                        }
                        catch (IOException ex) {
                            //amoMessage(ex.toString());
                        }
                    }
                }
                else if (bufferUpdate.getWhat() == BufferUpdate.DIRTY_CHANGED) {
                    updateLabel = true;
                }
            }
            else if (message instanceof ViewUpdate) {
                ViewUpdate viewUpdate = (ViewUpdate) message;
                
                if (viewUpdate.getWhat() == ViewUpdate.CREATED) {
                    viewsToCustomize.add(viewUpdate.getView());
                    EditBus.sendAsync(amoEBMessage("CUSTOMIZE"));
                }
            }
            //else if (message instanceof AmoEBMessage) {
            else if (message.getClass().getName().equals("AmoEBMessage")) {
                String param = message.paramString();
                
                if (param.equals("UPDATE")) {
                    amoListenerMessage("@ UPDATE RECEIVED");
                    
                    updateSent = false;
                    
                    if (updateMakefileSent) {
                        amoListenerMessage("+ updateMakefileSent");
                        
                        updateMakefileSent = false;
                        
                        File makefile = amoFindMakeFile();
                        
                        if (makefile != null && ! makefile.equals(lastMakefile) || makefile == null && lastMakefile != null) {
                            lastMakefile = makefile;
                            updateComponents = true;
                        }
                        else {
                            updateLabel = true;
                        }
                    }
                    
                    if (updateComponentsSent) {
                        amoListenerMessage("+ updateComponentsSent");
                        
                        updateComponentsSent = false;
                        updateComponents = true;
                    }
                    
                    if (! buffersToSave.isEmpty()) {
                        saveDuplications = true;
                    }
                }
                else if (param.equals("CUSTOMIZE")) {
                    if (viewsToCustomize.isEmpty()) {
                        viewsToCustomize.add(jEdit.getActiveView());
                    }
                    
                    HashSet views = viewsToCustomize.clone();
                    
                    for (View view: views) {
                        if (amoEnableAllCustomizations(view)) {
                            viewsToCustomize.remove(view);
                        }
                    }
                    
                    if (! viewsToCustomize.isEmpty()) {
                        EditBus.sendAsync(amoEBMessage("CUSTOMIZE"));
                    }
                }
                else if (param.equals("START")) {
                    amoListenerMessage("START");
                    updateComponents = true;
                }
                else if (param.equals("QUIT")) {
                    amoListenerMessage("REMOVED FROM BUS");
                    EditBus.removeFromBus(component);
                    
                    amoMakeRemoveComponents();
                }
            }
            
            //return;
            
            if (updateComponents) {
                amoListenerMessage("$ updateComponentsSent");
                
                amoMakeUpdateComponents(lastMakefile);
                
                lastDuplications.clear();
                BufferedReader br = amoMakeResult("sync-path", lastMakefile);
                
                if (br != null) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        lastDuplications.add(line);
                    }
                }
                
                updateLabel = true;
            }
            
            if (updateLabel || saveDuplications) {
                if (updateLabel) {
                    amoListenerMessage("$ updateLabel");
                }
                if (saveDuplications) {
                    amoListenerMessage("$ saveDuplications");
                }
                
                View view = jEdit.getActiveView();
                Buffer currentBuffer = view == null ? null : view.getBuffer();
                
                HashSet buffers;
                
                if (saveDuplications) {
                    buffers = buffersToSave.clone();
                    
                    buffersToSave.clear();
                    
                    for (Buffer buffer: buffers) {
                        savingBuffers.add(buffer);
                    }
                }
                else {
                    buffers = new HashSet();
                    
                    buffers.add(currentBuffer);
                }
                
                for (Buffer duplicatedBuffer: buffers) {
                    Vector duplications = new Vector();
                    Vector statusList = new Vector();
                    
                    if (duplicatedBuffer != null && lastMakefile != null) {
                        amoListenerMessage("$ duplicatedBuffer " + duplicatedBuffer.getName());
                        
                        File bufferFile = new File(duplicatedBuffer.getPath());
                        
                        if (bufferFile.exists()) {
                            String projectDirPath = lastMakefile.getParentFile().getAbsolutePath().replace(File.separator, "/") + "/";
                            String bufferDirPath = bufferFile.getParentFile().getAbsolutePath().replace(File.separator, "/") + "/";
                            
                            //if (duplicatedBuffer == savedBuffer) {
                                //savingBuffers.add(savedBuffer);
                            //}
                            
                            for (String saveDuplicationPath : lastDuplications) {
                                String localPath;
                                
                                int position = saveDuplicationPath.indexOf('|');
                                
                                if (position != -1) {
                                    localPath = (saveDuplicationPath.substring(0, position).replace(File.separator, "/") + "/").replace("//", "/");
                                    saveDuplicationPath = (saveDuplicationPath.substring(position + 1).replace(File.separator, "/") + "/").replace("//", "/");
                                }
                                else {
                                    localPath = projectDirPath;
                                    saveDuplicationPath = (saveDuplicationPath.replace(File.separator, "/") + "/").replace("//", "/");
                                }
                                
                                if (bufferDirPath != null && bufferDirPath.startsWith(localPath)) {
                                    String savePath = saveDuplicationPath + bufferDirPath.substring(localPath.length());
                                    
                                    (new File(savePath)).mkdirs();
                                    
                                    savePath += bufferFile.getName();
                                    
                                    duplications.add(savePath);
                                    
                                    if (saveDuplications) {
                                        amoListenerMessage("$ saveDuplication " + duplicatedBuffer.getName());
                                        
                                        duplicatedBuffer.readLock();
                                        
                                        duplicatedBuffer.save(null, savePath, false);
                                        
                                        duplicatedBuffer.readUnlock();
                                        
                                        VFSManager.waitForRequests();
                                        
                                        //amoMessage("save to " + savePath);
                                        statusList.add("<font color=blue>Written</font>");
                                        
                                        File saveFile = new File(savePath);
                                        long blm = bufferFile.lastModified();
                                        //long olm = saveFile.lastModified();
                                        saveFile.setLastModified(blm);
                                        //long nlm = saveFile.lastModified();
                                        //amoMessage("blm " + blm + " olm " + olm + " nlm " + nlm);
                                    }
                                    else {
                                        File saveFile = new File(savePath);
                                        
                                        if (saveFile.exists()) {
                                            long timeDiff = saveFile.lastModified() - bufferFile.lastModified();
                                            if (timeDiff < - 1 * 1000) {
                                                statusList.add("<font color=red>Older" /* + " " + (- timeDiff / 1000.) + "s " */ + "</font>");
                                            }
                                            else if (timeDiff > 0) {
                                                statusList.add("<font color=red>Newer" /* + " " + (timeDiff / 1000.) + "s " */ + "</font>");
                                            }
                                            else {
                                                statusList.add("<font color=green>Up-to-date" /*+ " " + (timeDiff) + "ms " */ + "</font>");
                                            }
                                        }
                                        else {
                                            statusList.add("<font color=gray>Does not exist</font>");
                                        }
                                    }
                                }
                            }
                            
                            //if (duplicatedBuffer == savedBuffer) {
                            //    savingBuffers.remove(savedBuffer);
                            //}
                        }
                    }
                    
                    if (currentBuffer == duplicatedBuffer) {
                        String labelText = "<html>(";
                        String toolTip = "<html><table>";
                        
                        if (currentBuffer == null) {
                            //labelText += "No Buffer";
                            toolTip += "<tr><td>No Buffer</tr></td>";
                        }
                        else {
                            /*if (currentBuffer.isDirty()) {
                                labelText += "<b><font color=red>" + currentBuffer.getName() + "</font></b>: ";
                            }
                            else {
                                labelText += "<b>" + currentBuffer.getName() + "</b>: ";
                            }*/
                            toolTip +=
                                "<tr><td><b>Buffer:</b></td><td colspan=2>" +
                                currentBuffer.getPath().replace(File.separator, "/") + "</tr></td>";
                        }
                        
                        if (lastMakefile == null) {
                            labelText += "No Makefile";
                            toolTip += "<tr><td>No Makefile</tr></td>";
                        }
                        else {
                            toolTip +=
                                "<tr><td><b>Makefile:</b></td><td colspan=2>" +
                                lastMakefile.getPath().replace(File.separator, "/") + "</tr></td>";
                            
                            if (duplications.isEmpty()) {
                                labelText += "No duplication";
                                toolTip += "</table><br><i>Left click to open Makefile</i>";
                            }
                            else {
                                for (int i = 0; i < duplications.size(); ++i) {
                                    String duplication = duplications.elementAt(i);
                                    String status = statusList.elementAt(i);
                                    
                                    if (i > 0) labelText += ", ";
                                    labelText += status;
                                    
                                    toolTip +=
                                        "<tr><td><b>Duplication:</b></td><td>" +
                                        duplication +
                                        "</td><td> (" + status + ")</tr></td>";
                                }
                                
                                toolTip += "</table><br><i>Left click to open Makefile</i>";
                                
                                if (duplications.size() > 1) {
                                    toolTip += "<br><i>Right click to open all duplications</i>";
                                }
                                else {
                                    toolTip += "<br><i>Right click to open duplication</i>";
                                }
                            }
                        }
                        
                        labelText += ")<span> </span></html>";
                        toolTip += "</html>";
                        
                        JLabel label = (JLabel) amoMakeComponent("AmoMakefileLabel", false, Class.forName("javax.swing.JLabel"));
                        
                        if (label != null) {
                            //amoMessage("-----------------\n" + labelText + "\n" + toolTip);
                            //amoMessage(label.toString());
                            //amoMessage("-----------------");
                            
                            label.putClientProperty("duplications", duplications);
                            label.putClientProperty("text", labelText);
                            label.setText(labelText);
                            label.setToolTipText(toolTip);
                            
                            Dimension d = label.getPreferredSize();
                            d.height = 25;
                            //label.setPreferredSize(d);
                            label.setMinimumSize(d);
                            label.setMaximumSize(d);
                            label.getParent().validate();
                        }
                    }
                }
                
                if (saveDuplications) {
                    for (Buffer buffer: buffers) {
                        savingBuffers.remove(buffer);
                    }
                }
            }
            
            /*{
                View view = jEdit.getActiveView();
                
                if (view != null) {
                    Buffer buffer = view.getBuffer();
                    if (buffer != null) {
                        amoListenerMessage(" -> " + message + "\n    " + buffer.getProperty("indentSize"));
                    }
                }
            }*/
            
            if (amoListenerDiagnose) {
                amoListenerMessage("<---");
            }
            
            processing = false;
        }
    };
    
    EditBus.addToBus(component);
    
    EditBus.send(amoEBMessage("START"));
}

void amoMakeStopListener() {
    EditBus.send(amoEBMessage("QUIT"));
}

