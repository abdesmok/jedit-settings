sourceRelative("../utils.bsh");

includeOnce("log.bsh");
includeOnce("find.bsh");
includeOnce("gui.bsh");

Vector amoMakeArgList() {
    return amoMakeArgList(null, null);
}

Vector amoMakeArgList(File makefile) {
    return amoMakeArgList(null, makefile);
}

Vector amoMakeArgList(View view, File makefile) {
    if (view == null) {
        view = jEdit.getActiveView();
    }
    
    if (makefile == null)
        makefile = amoFindMakeFile(view);
        
    Vector args = amoGuiMakeArgList(view);
    
    if (view != null) {
        JEditTextArea textArea = view.getTextArea();
        
        if (textArea != null) {
            JEditBuffer buffer = textArea.getBuffer();
            
            if (buffer != null && buffer.getPath() != null) {
                args.add("EDITOR_FILE=" + buffer.getPath().replace(File.separatorChar, '/'));
                args.add("EDITOR_LINE=" + (textArea.getCaretLine() + 1));
                args.add("EDITOR_COLUMN=" + (textArea.getCaretPosition() - textArea.getLineStartOffset(textArea.getCaretLine()) + 1));
            }
        }
    }
    
    /*if (makefile != null) {
        args.add("MAKEFILE_FILE=" + makefile.getPath().replace(makefile.separator, "/"));
        args.add("MAKEFILE_PATH=" + makefile.getParent().replace(makefile.separator, "/"));
    }*/
    
    return args;
}

String  amoMakeArgs() {
    return amoMakeArgs(null, null);
}

String amoMakeArgs(File makefile) {
    return amoMakeArgs(null, makefile);
}

String amoMakeArgs(View view, File makefile) {
    String args = "";
    
    for (String arg : amoMakeArgList(view, makefile)) {
        args += " \"" + arg + "\"";
    }
    
    return args;
}

BufferedReader amoMakeResult(String what) {
    return amoMakeResult(null, what, null);
}

BufferedReader amoMakeResult(String what, File makefile) {
    return amoMakeResult(null, what, makefile);
}

String make;

if (System.getProperty("os.name").toLowerCase().indexOf("win") >= 0)
    make = pathToFile(dirname(getSourceFileInfo()) + File.separator + ".." + File.separator + "make.exe").getAbsolutePath();
else
    make = "make";

BufferedReader amoMakeResult(View view, String what, File makefile) {
    if (makefile == null)
        makefile = amoFindMakeFile(view);
    
    if (makefile != null && makefile.exists()) {
        if (makefile.getName().endsWith(".bsh")) {
            Object context = run(makefile.getPath(), this);
            
            if (Arrays.asList(context.methods).contains("make")) {
                return new BufferedReader(new StringReader(context.make(what)));
            }
        }
        else {
            ArrayList args = new ArrayList();
            
            args.add(make);
            args.add(what);
            args.add("-s");
            args.add("NO_BUILD_TARGETS=1");
            for (String arg : amoMakeArgList(view, makefile)) {
                args.add(arg);
            }
            args.add("-C");
            args.add(makefile.getParent().replace(makefile.separator, "/"));
            args.add("-f");
            args.add(makefile.getName());
            
            ProcessBuilder pb = new ProcessBuilder(args);
            
            //amoMessage(args.toString());
            
            //pb.redirectErrorStream(true);
            
            return new BufferedReader(new InputStreamReader(pb.start().getInputStream()));
        }
    }
    
    return null;
}
