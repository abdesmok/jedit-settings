import org.gjt.sp.jedit.*;
import org.jedit.core.*;
import projectviewer.*;
import projectviewer.vpt.*;
import projectviewer.event.*;
import java.io.*;
import java.util.*;
import console.*;
import java.awt.*;
import java.awt.event.*;
import java.swing.*;

void amoMakeMessage(String message) {
    View view = jEdit.getActiveView();
    if (view != null)
        ConsolePlugin.getConsole(view).getOutput().print(new Color(50, 10, 200), message);
}

String amoFindProjectDirectory() {
    View view = jEdit.getActiveView();
    
    if (jEdit.getPlugin("projectviewer.ProjectPlugin", true) == null) {
        Macros.error(view, "ProjectViewer not installed");
        return null;
    }
    
    VPTProject project = ProjectViewer.getActiveProject(view);
    
    if (project == null) {
        ProjectViewer viewer = ProjectViewer.getViewer(view);
        if (viewer != null) {
            VPTNode selected = viewer.getSelectedNode();
            if (selected != null) {
                project = VPTNode.findProjectFor(selected);
            }
        }
    }
    
    if (project != null)
        return project.getNodePath();
    else
        return null;
}

File amoMakeFile(String directory) {
    File file;
    
    file = new File(directory + File.separator + "Makefile.jedit");
    if (file.exists()) return file;
    
    file = new File(directory + File.separator + "Makefile");
    if (file.exists()) return file;
    
    return null;
}

File amoFindMakeFile() {
    
    View view = jEdit.getActiveView();
    Buffer buffer = (view == null) ? null : view.getBuffer();
    
    if (buffer != null) {
        File directory = new File(buffer.getDirectory());
        File makefile = null;
        
        while (true) {
            makefile = amoMakeFile(directory.getPath());
            
            if (makefile != null) break;
            
            String path = directory.getParent();
            
            if (path == null) break;
            
            directory = new File(path);
        }
        
        if (makefile != null) {
            //amoMakeMessage("Using " + makefile + " found in current buffer path");
        }
        else {
            String path = amoFindProjectDirectory();
            
            if (path != null) {
                directory = new File(path);
                makefile = amoMakeFile(path);
                
                if (makefile != null) {
                    //amoMakeMessage("Using " + makefile + " found in project directory");
                }
            }
        }
        
        if (makefile == null) {
            //amoMakeMessage("Makefile not found");
        }
        
        return makefile;
    }
    
    return null;
}

Container amoMakeContainer() {
    View view = jEdit.getActiveView();
    
    if (view != null) {
        JMenuBar menuBar = view.getJMenuBar();
        if (menuBar != null) {
            
            for (int i = 0; i < menuBar.getComponentCount(); ++i) {
                JComponent component = menuBar.getComponent(i);
                if (component instanceof Box.Filler) {
                    return menuBar;
                }
            }
            
            menuBar.add(Box.createHorizontalGlue());
            
            return menuBar;
        }
    }
    
    return null;
}

void amoMakeRemoveComponents() {
    Container container = amoMakeContainer();
    
    if (container == null)
        return;
        
    for (int i = 0; i < container.getComponentCount(); ) {
        String name = container.getComponent(i).getName();
        
        if (name != null && name.startsWith("AmoMake_"))
            container.remove(i);
        else
            ++i;
    }
}

JComboBox amoMakeComboBox(String name, boolean create) {
    return (JComboBox) amoMakeComponent(name, create, Class.forName("javax.swing.JComboBox"));
}

JComponent amoMakeComponent(String name, boolean create, Class type) {
    Container container = amoMakeContainer();
    
    if (container == null)
        return null;
        
    int index = 0;
    
    JComponent component = null;
    
    for (int i = 0; i < container.getComponentCount(); ++i) {
        JComponent existingComponent = container.getComponent(i);
        String existingComponentName = existingComponent.getName();
        
        //amoMakeMessage("component " + i + " " + existingComponent.getClass().getName() + " " + (existingComponentName == null ? "null" : existingComponentName));
        
        if (existingComponent.getClass().equals(type)) {
            if (existingComponentName != null && existingComponentName.equals(name)) {
                if (component == null) {
                    component = existingComponent;
                }
                else {
                    container.remove(existingComponent);
                    continue;
                }
            }
        }
    }
    
    if (component != null || ! create)
        return component;
        
    component = (JComponent) type.newInstance();
    
    if (component != null) {
        component.setName(name);
        
        container.add(component);
    }
    
    return component;
}

void amoMakeUpdateComponents() {
    amoMakeUpdateComponents(null);
}

void amoMakeUpdateComponents(File makefile) {
    amoMakeRemoveComponents();
    
    if (makefile == null)
        makefile = amoFindMakeFile();
    //amoMakeMessage("makefile: " + (makefile == null ? "null" : makefile.getPath()));
    
    if (makefile != null) {
        String makefilePath = makefile.getPath().replace(makefile.separator, "/");
        
        JLabel label = (JLabel) amoMakeComponent("AmoMakefileLabel", true, Class.forName("javax.swing.JLabel"));
        
        if (label != null) {
            label.setText(makefilePath + " ");
            
            label.addMouseListener(new MouseListener() {
                void mouseClicked(MouseEvent event) {
                    //FileOpenerService.open(makefilePath, );
                    jEdit.openFile(jEdit.getActiveView(), makefilePath);
                }
                invoke(name, args) {
                    print("Method: " + name + " invoked!");
                }
            });
        }
        
        ArrayList args = new ArrayList();
        
        args.add("make");
        args.add("args");
        args.add("-s");
        args.add("-f");
        args.add(makefilePath);
        
        ProcessBuilder pb = new ProcessBuilder(args);
        
        //amoMakeMessage(args.toString());
        
        //pb.redirectErrorStream(true);
        
        Process proc = pb.start();
        
        InputStream is = proc.getInputStream();
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        
        String line;
        
        while ((line = br.readLine()) != null) {
            int index = line.indexOf('=');
            
            //amoMakeMessage(line);
            if (index > 0) {
                JComboBox comboBox = amoMakeComboBox("AmoMake_" + line.substring(0, index), true);
                comboBox.addItem(line);
                comboBox.setMaximumSize(comboBox.getMinimumSize());
                comboBox.getParent().validate();
            }
        }
    }
    
    Container container = amoMakeContainer();
    
    if (container != null) {
        for (int i = 0; i < container.getComponentCount(); ++i) {
            JComponent component = container.getComponent(i);
            String componentName = component.getName();
            
            if (component instanceof JComboBox && componentName != null && componentName.startsWith("AmoMake_")) {
                JComboBox comboBox = (JComboBox) component;
                String value = jEdit.getProperty("macro.amo.make.value." + componentName, null);
                //amoMakeMessage("macro.amo.make.value." + componentName + "-------------->" + jEdit.getProperty("macro.amo.make.value." + componentName, "null"));
                if (value != null)
                    comboBox.setSelectedItem(value);
                
                comboBox.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        jEdit.setProperty("macro.amo.make.value." + componentName, comboBox.getSelectedItem());
                        //amoMakeMessage("macro.amo.make.value." + componentName + "<--------------" + comboBox.getSelectedItem());
                        //amoMakeMessage(amoMakeArgs());
                    }
                });
            }
        }
    }
}

String amoMakeArgs() {
    Container container = amoMakeContainer();
    
    String args = "";
    
    if (container == null)
        return args;
        
    for (int i = 0; i < container.getComponentCount(); ++i) {
        JComponent component = container.getComponent(i);
        String componentName = component.getName();
        
        if (component instanceof JComboBox && componentName != null && componentName.startsWith("AmoMake_")) {
            String value = ((JComboBox) component).getSelectedItem();
            args += " " + value;
        }
    }
    
    return args;
}

void amoMake(String what) {
    File makefile = amoFindMakeFile();
    
    if (makefile != null) {
        // go to directory
        runCommandInConsole(view, "System", makefile.getParent());
        
        // run make
        runCommandInConsole(view, "System", "make -f " + makefile.getName() + " " + what + amoMakeArgs());
        
        // Set focus on text area
        if (! textArea.getDisplayManager().isLineVisible(textArea.getCaretLine())) {
            textArea.getDisplayManager().expandFold(textArea.getCaretLine(), true);
        }
        textArea.scrollToCaret(true);
        textArea.requestFocus();
    }
}

void amoMakeStartListener() {
    EBComponent component = new EBComponent() {
        {
            lastMakefile = null;
        }
        public void finalize() {
        }
        public void handleMessage(EBMessage message) {
            //amoMakeMessage(message.toString() + "\n  " + message.paramString());
            
            boolean update = false;
            
            if (message instanceof NodeSelectionUpdate || message.paramString().equals("AMO-UPDATE-PARAM")) {
                //amoMakeMessage("AMO UPDATE COMPONENTS " + message);
                File makefile = amoFindMakeFile();
                
                //amoMakeMessage((lastMakefile == null ? "null" : lastMakefile.getPath()) + " ?= " + (makefile == null ? "null" : makefile.getPath()));
                
                if (makefile != null && ! makefile.equals(lastMakefile) || makefile == null && lastMakefile != null) {
                    lastMakefile = makefile;
                    update = true;
                }
            }
            else if (message instanceof ViewerUpdate || message instanceof BufferChanging) {
                class Message extends EBMessage {
                    public Message() {
                        super(new EBComponent() {});
                    }
                    public String paramString() { return "AMO-UPDATE-PARAM"; }
                };
                
                Message message = new Message();
                
                EditBus.sendAsync(message);
            }
            else if (message instanceof BufferUpdate) {
                BufferUpdate bufferUpdate = (BufferUpdate) message;
                if (bufferUpdate.getWhat() == BufferUpdate.SAVED && lastMakefile != null) {
                    if (bufferUpdate.getBuffer().getPath().equals(lastMakefile.getPath())) {
                        update = true;
                    }
                    else {
                        amoMakeMessage("---------SAVED " + bufferUpdate.getBuffer().getPath());
                    }
                }
            }
            else if (message.paramString().equals("AMO-QUIT-PARAM")) {
                amoMakeMessage("AMO REMOVE FROM BUS " + component);
                EditBus.removeFromBus(component);
            }
            
            if (update) {
                if (
                amoMakeUpdateComponents(lastMakefile);
            }
        }
        
        File lastMakefile;
        String saveDuplicationPath;
    };
    
    amoMakeMessage("AMO ADD TO BUS " + component);
    EditBus.addToBus(component);
}

void amoMakeStopListener() {
    class Message extends EBMessage {
        public Message() {
            super(new EBComponent() {});
        }
        public String paramString() { return "AMO-QUIT-PARAM"; }
    };
    
    Message message = new Message();
    
    EditBus.send(message);
}

