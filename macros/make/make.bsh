import org.gjt.sp.jedit.*;
import projectviewer.*;
import projectviewer.vpt.*;
import projectviewer.event.*;
import java.io.*;
import java.util.*;
import console.*;
import java.awt.*;
import java.awt.event.*;
import java.swing.*;

void amoMakeInfo(View view, String message) {
    if (view != null)
        ConsolePlugin.getConsole(view).getOutput().print(new Color(50, 150, 100), message);
}

void amoMakeMessage(View view, String message) {
    if (view != null)
        ConsolePlugin.getConsole(view).getOutput().print(new Color(50, 10, 200), message);
}

void amoMakeInfo(String message) {
    amoMakeInfo(view, message);
}

void amoMakeMessage(String message) {
    amoMakeMessage(view, message);
}

String amoFindProjectDirectory() {
    if (jEdit.getPlugin("projectviewer.ProjectPlugin", true) == null) {
        Macros.error(view, "ProjectViewer not installed");
        return null;
    }
    
    VPTProject project = ProjectViewer.getActiveProject(view);
    
    if (project == null) {
        ProjectViewer viewer = ProjectViewer.getViewer(view);
        if (viewer != null) {
            VPTNode selected = viewer.getSelectedNode();
            if (selected != null) {
                project = VPTNode.findProjectFor(selected);
            }
        }
    }
    
    if (project != null)
        return project.getNodePath();
    else
        return null;
}

File amoMakeFile(String directory) {
    File file;
    
    file = new File(directory + File.separator + "Makefile.jedit");
    if (file.exists()) return file;
    
    file = new File(directory + File.separator + "Makefile");
    if (file.exists()) return file;
    
    return null;
}

File amoFindMakeFile() {
    if (buffer != null) {
        File directory = new File(buffer.getDirectory());
        File makefile = null;
        
        while (true) {
            makefile = amoMakeFile(directory.getPath());
            
            if (makefile != null) break;
            
            String path = directory.getParent();
            
            if (path == null) break;
            
            directory = new File(path);
        }
        
        if (makefile != null) {
            amoMakeMessage("Using " + makefile + " found in current buffer path");
        }
        else {
            String path = amoFindProjectDirectory();
            
            if (path != null) {
                directory = new File(path);
                makefile = amoMakeFile(path);
                
                if (makefile != null) {
                    amoMakeMessage("Using " + makefile + " found in project directory");
                }
            }
        }
        
        if (makefile == null) {
            amoMakeMessage("Makefile not found");
        }
        
        return makefile;
    }
    
    return null;
}

Container amoMakeContainer() {
    if (jEdit.getPlugin("console.ConsolePlugin", true) == null) {
        Macros.error(view, "ConsolePlugin not installed");
        return null;
    }
    
    Container container = ConsolePlugin.getConsole(view);
    
    if (container != null)
        container = container.getComponent(0);
        
    if (container == null) {
        Macros.error(view, "Container not found");
    }
    
    return container;
}

void amoMakeRemoveComponents() {
    Container container = amoMakeContainer();
    
    if (container == null)
        return;
        
    for (int i = 0; i < container.getComponentCount(); ) {
        String name = container.getComponent(i).getName();
        
        if (name != null && name.startsWith("AmoMake_"))
            container.remove(i);
        else
            ++i;
    }
}

JComboBox amoMakeComboBox(String name, boolean create) {
    Container container = amoMakeContainer();
    
    if (container == null)
        return null;
        
    int index = 0;
    
    JComboBox comboBox = null;
    
    for (int i = 0; i < container.getComponentCount(); ) {
        JComponent component = container.getComponent(i);
        String componentName = component.getName();
        
        //amoMakeMessage(component.getClass().getName() + " " + component.getName());
        
        if (component instanceof JComboBox) {
            if (componentName != null && componentName.equals(name)) {
                if (comboBox == null) {
                    comboBox = (JComboBox) component;
                }
                else {
                    container.remove(component);
                    continue;
                }
            }
            else if (componentName != null && componentName.startsWith("AmoMake_")) {
                index = i + 1;
            }
        }
        else if (component instanceof Box.Filler && index == 0) {
            index = i + 1;
        }
        ++i;
    }
    
    if (comboBox != null || ! create)
        return comboBox;
        
    comboBox = new JComboBox();
    
    comboBox.setName(name);
    
    container.add(comboBox, index);
    
    comboBox.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            jEdit.setProperty("macro.amo.make.value." + cname, comboBox.getSelectedItem());
            //amoMakeMessage(amoMakeArgs());
        }
    });
    
    return comboBox;
}

void amoMakeUpdateComponents() {
    amoMakeRemoveComponents();
    
    File makefile = amoFindMakeFile();
    
    if (makefile != null) {
        ArrayList args = new ArrayList();
        
        args.add("make");
        args.add("args");
        args.add("-s");
        args.add("-f");
        args.add(makefile.getPath());
        
        ProcessBuilder pb = new ProcessBuilder(args);
        pb.redirectErrorStream(true);
        Process proc = pb.start();
        
        InputStream is = proc.getInputStream();
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        
        String line;
        int exit = -1;
        
        while ((line = br.readLine()) != null) {
            int index = line.indexOf('=');
            
            if (index > 0) {
                JComboBox comboBox = amoMakeComboBox("AmoMake_" + line.substring(0, index), true);
                comboBox.addItem(line);
                comboBox.setMaximumSize(comboBox.getMinimumSize());
                comboBox.getParent().validate();
            }
        }
    }
    
    Container container = amoMakeContainer();
    
    for (int i = 0; i < container.getComponentCount(); ++i) {
        JComponent component = container.getComponent(i);
        String componentName = component.getName();
        
        if (component instanceof JComboBox && componentName != null && componentName.startsWith("AmoMake_")) {
            JComboBox comboBox = (JComboBox) component;
            String value = jEdit.getProperty("macro.amo.make.value." + componentName, null);
            if (value != null)
                comboBox.setSelectedItem(value);
        }
    }
}

void amoMakeInstallProjectListener(View view) {
    if (jEdit.getPlugin("projectviewer.ProjectPlugin", true) != null) {
        EditBus.addToBus(
            new EBComponent() {
                public void handleMessage(EBMessage message) {
                    amoMakeMessage(message.toString());
                    if (message instanceof NodeSelectionUpdate) {
                        static String previousMakefile = null;
                        
                        File makefile = amoFindMakeFile();
                        String currentMakefile = makefile ? makefile.getAbsolutePath() : null;
                        
                        amoMakeMessage(view, message.toString());
                        amoMakeMessage(view, "previousMakefile " + (previousMakefile ? previousMakefile : "null"));
                        amoMakeMessage(view, "currentMakefile " + (currentMakefile ? currentMakefile : "null"));
                        
                        if (previousMakefile == null || currentMakefile == null || ! previousMakefile.equals(currentMakefile)) {
                            previousMakefile = currentMakefile;
                            amoMakeMessage(message.toString() + " " + (currentMakefile ? currentMakefile : "null"));
                            //amoMakeUpdateComponents();
                        }
                    }
                }
            }
        );
        amoMakeMessage(view, "New listener added to jEdit EditBus");
    }
}

void amoMakeInstallProjectListener() {
    amoMakeInstallProjectListener(view);
}

String amoMakeArgs() {
    Container container = amoMakeContainer();
    
    String args = "";
    
    if (container == null)
        return args;
        
    for (int i = 0; i < container.getComponentCount(); ++i) {
        JComponent component = container.getComponent(i);
        String componentName = component.getName();
        
        if (component instanceof JComboBox && componentName != null && componentName.startsWith("AmoMake_")) {
            String value = ((JComboBox) component).getSelectedItem();
            args += " " + value;
        }
    }
    
    return args;
}

void amoMake(String what) {
    File makefile = amoFindMakeFile();
    
    if (makefile != null) {
        // go to directory
        runCommandInConsole(view, "System", makefile.getParent());
        
        // run make
        runCommandInConsole(view, "System", "make -f " + makefile.getName() + " " + what + amoMakeArgs());
        
        // Set focus on text area
        if (! textArea.getDisplayManager().isLineVisible(textArea.getCaretLine())) {
            textArea.getDisplayManager().expandFold(textArea.getCaretLine(), true);
        }
        textArea.scrollToCaret(true);
        textArea.requestFocus();
    }
}

